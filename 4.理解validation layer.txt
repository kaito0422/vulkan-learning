#define GLFW_INCLUDE_VULKAN
#include <GLFW/glfw3.h>

#include <iostream>
#include <stdexcept>
#include <functional>
#include <vector>
#include <string.h>

const int WIDTH = 800;
const int HEIGHT = 600;

// 预先设定的Validation Layer
const std::vector<const char *> validationLayers = { "VK_LAYER_LUNARG_standard_validation" };

#ifdef NDEBUG		// 配置宏来确定是否启用Validation Layer
const bool enableValidationLayers = false;
#else
const bool enableValidationLayers = true;
#endif

class HelloTriangleApplication {
public:
	void run()
	{
		initWindow();
		initVulkan();
		mainLoop();
		cleanup();
	}

private:
	GLFWwindow *window;
	VkInstance instance;
	VkDebugReportCallbackEXT callback;	// 用于设置vulkan的回调函数

	void initVulkan()
	{
		createInstance();
		setupDebugCallback();
	}

	void mainLoop()
	{
		while (!glfwWindowShouldClose(window))
		{
			glfwPollEvents();
		}
	}

	void cleanup()
	{
		vkDestroyInstance(instance, nullptr);
		glfwDestroyWindow(window);

		glfwTerminate();
	}

	void initWindow()
	{
		glfwInit();

		glfwWindowHint(GLFW_CLIENT_API, GLFW_NO_API);
		glfwWindowHint(GLFW_RESIZABLE, GLFW_FALSE);

		window = glfwCreateWindow(WIDTH, HEIGHT, "vulkan-kaito", nullptr, nullptr);
	}

	void createInstance()
	{
		// 检查是否启用Validation Layer，以及系统是否支持我们需要的Validation Layer
		if (enableValidationLayers && !checkValidationLayerSupport())
			throw std::runtime_error("validation layers requested, but not available!");

		VkApplicationInfo appInfo = { };
		appInfo.sType = VK_STRUCTURE_TYPE_APPLICATION_INFO;
		appInfo.pNext = nullptr;
		appInfo.pApplicationName = "Hello kaito";			
		appInfo.applicationVersion = VK_MAKE_VERSION(1, 0, 0);
		appInfo.pEngineName = "No Engine";
		appInfo.engineVersion = VK_MAKE_VERSION(1, 0, 0);
		appInfo.apiVersion = VK_API_VERSION_1_0;

		VkInstanceCreateInfo inst_info = { };
		inst_info.sType = VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO;
		inst_info.pApplicationInfo = &appInfo;

		// 检查是否启用Validation Layer
		if (enableValidationLayers)
		{
			inst_info.enabledLayerCount = static_cast<uint32_t>(validationLayers.size());
			inst_info.ppEnabledLayerNames = validationLayers.data();
		}
		else
			inst_info.enabledLayerCount = 0;


		// 当为GLFW window创建vulkan surface时，该函数返回一个vulkan instance扩展的字符串名称
		// 函数返回glfwExtensionCount个字符串，每个字符串表示glfw支持的一种vulkan扩展的名字
		//		unsigned int glfwExtensionCount = 0;
		//		const char** glfwExtensions;
		//		glfwExtensions = glfwGetRequiredInstanceExtensions(&glfwExtensionCount);
		auto extensions = getRequiredExtensions();
		inst_info.enabledExtensionCount = static_cast<uint32_t>(extensions.size());		// 填写函数返回得到的扩展信息
		inst_info.ppEnabledExtensionNames = extensions.data();
		// 显示glfw支持的扩展
		std::cout << "glfw support extension number: " << inst_info.enabledExtensionCount << std::endl;
		for(int i = 0; i < inst_info.enabledExtensionCount; i++)
			std::cout <<  "\t" << i << " " << inst_info.ppEnabledExtensionNames[i] << std::endl;
		
		uint32_t vkExtNum = 0;
		VkExtensionProperties *vkExtName;
		vkEnumerateInstanceExtensionProperties(nullptr, &vkExtNum, nullptr);
		vkExtName = (VkExtensionProperties *)malloc(sizeof(VkExtensionProperties) * vkExtNum);
		vkEnumerateInstanceExtensionProperties(nullptr, &vkExtNum, vkExtName);
		std::cout << "vulkan support extension number: " << vkExtNum << std::endl;
		for(int i = 0; i < vkExtNum; i++)
			std::cout << "\t" << i << " " << vkExtName[i].extensionName << std::endl;

		VkResult res = vkCreateInstance(&inst_info, nullptr, &instance);
		if (res != VK_SUCCESS)
			throw std::runtime_error("failed to create instance!");
		else
			std::cout << "instance create success!" << std::endl;

		free(vkExtName);
	}

	bool checkValidationLayerSupport()		// 检查系统是否支持我们预先设定的Validation Layer
	{
		uint32_t layerCount = 0;
		vkEnumerateInstanceLayerProperties(&layerCount, nullptr);
		if (layerCount == 0)
			return false;

		std::vector<VkLayerProperties> availableLayers(layerCount);
		vkEnumerateInstanceLayerProperties(&layerCount, availableLayers.data());

		std::cout << "available Validation Layer:" << std::endl;
		for (int i = 0; i < layerCount; i++)
		{
			std::cout << "\t" << i << " " << availableLayers[i].layerName;
			for (int j = strlen(availableLayers[i].layerName); j < 33; j++)
				std::cout << " ";
			std::cout << "\t" << availableLayers[i].description << std::endl;
		}

		for (const char *layerName : validationLayers)
		{
			bool layerFound = false;

			for(const auto& layerProperties : availableLayers)
				if (strcmp(layerName, layerProperties.layerName) == 0)
				{
					layerFound = true;
					break;
				}

			if (!layerFound)
				return false;
		}

		return true;
	}

	std::vector<const char*> getRequiredExtensions()	// 获取glfw支持的extension
	{
		std::vector<const char*> extensions;

		unsigned int glfwExtensionCount = 0;
		const char** glfwExtensions;
		glfwExtensions = glfwGetRequiredInstanceExtensions(&glfwExtensionCount);

		for (unsigned int i = 0; i < glfwExtensionCount; i++)
			extensions.push_back(glfwExtensions[i]);

		if (enableValidationLayers)
			extensions.push_back(VK_EXT_DEBUG_REPORT_EXTENSION_NAME);

		return extensions;
	}

	/*
	* 该函数的作用是Validation Layer的回调函数，当Validation Layer发生检验错误时，应当调用该函数
	* flags表示指定消息的类型(uint32_t)
	*		VK_DEBUG_REPORT_INFORMATION_BIT_EXT
	*		VK_DEBUG_REPORT_WARNING_BIT_EXT
	*		VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT
	*		VK_DEBUG_REPORT_ERROR_BIT_EXT
	*		VK_DEBUG_REPORT_DEBUG_BIT_EXT
	* objType表示消息主体对象的类型，比如obj是VkPhysicalDevice，则objType就是VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT
	函数返回一个布尔值，表示触发该校验错误时，是否该停止vulkan调用（一般总是返回VK_FALSE）
	*/
	static VKAPI_ATTR VkBool32 VKAPI_CALL debugCallback(
		VkDebugReportFlagsEXT flags,			// 指定消息的类型
		VkDebugReportObjectTypeEXT objType,		// 
		uint64_t obj,
		size_t location,
		int32_t code,
		const char* layerPrefix,
		const char* msg,
		void* userData)
	{
		std::cerr << "Validation Layer: " << msg << std::endl;

		return VK_FALSE;
	}

	// 设置回调函数
	void setupDebugCallback()
	{
		if (!enableValidationLayers) return;

		VkDebugReportCallbackCreateInfoEXT createInfo = { };
		createInfo.sType = VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT;
		createInfo.flags = VK_DEBUG_REPORT_DEBUG_BIT_EXT | VK_DEBUG_REPORT_WARNING_BIT_EXT;
		createInfo.pfnCallback = debugCallback;		// 设置为上面编写的回调函数
		
		if (CreateDebugReportCallbackExt(instance, &createInfo, nullptr, &callback) != VK_SUCCESS)
			throw std::runtime_error("failed to set up debug callback!");
	}

	VkResult CreateDebugReportCallbackExt(VkInstance instance, const VkDebugReportCallbackCreateInfoEXT* pCreateInfo,
		const VkAllocationCallbacks* pAllocator, VkDebugReportCallbackEXT* pCallback)
	{
		auto func = (PFN_vkCreateDebugReportCallbackEXT)vkGetInstanceProcAddr(instance, "vkCreateDebugReportCallbackEXT");
		if (func != nullptr)
			return func(instance, pCreateInfo, pAllocator, pCallback);
		else
			return VK_ERROR_EXTENSION_NOT_PRESENT;
	}
};


int main()
{
	HelloTriangleApplication app;

	try {
		app.run();
	}
	catch (const std::runtime_error& e)
	{
		std::cerr << e.what() << std::endl;
		return EXIT_FAILURE;
	}
	
	system("pause");
	return EXIT_SUCCESS;
}